<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--    class	这个属性是强制性的，并且指定用来创建 bean 的 bean 类。-->
    <!--    name	这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和/或 name 属性来指定 bean 标识符。-->
    <!--    scope	这个属性指定由特定的 bean 定义创建的对象的作用域，缺省值singleton，其他值prototype（每次从容器中调用Bean时，都返回一个新的实例）-->
    <!--    constructor-arg	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。-->
    <!--    properties	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。-->
    <!--    autowiring mode	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。-->
    <!--    lazy-initialization mode	延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。-->
    <!--    initialization 方法	在 bean 的所有必需的属性被容器设置之后，调用回调方法。它将会在 bean 的生命周期章节中进行讨论。-->
    <!--    destruction 方法	当包含该 bean 的容器被销毁时，使用回调方法。它将会在 bean 的生命周期章节中进行讨论。-->
    <bean id="helloworld" class="com.wmm.spring.beans.HelloWorld" scope="singleton" init-method="init" destroy-method="destroy">
        <property name="message" value="Hello,Spring"/>
    </bean>

    <bean id="user" class="com.wmm.spring.beans.User">
        <property name="name" value="wmm"/>
        <property name="phoneNumber">
            <set>
                <value>13554376813</value>
                <value>13007118169</value>
            </set>
        </property>
        <property name="devices">
            <list value-type="com.wmm.spring.beans.Device">
                <bean id="device2" class="com.wmm.spring.beans.Device">
                    <constructor-arg index="0" value="sdfsdfsdf"/>
                    <constructor-arg index="1" ref="organziation1"/>
                </bean>
                <bean id="device3" class="com.wmm.spring.beans.Device">
                    <constructor-arg index="0" value="35458d2rwerwerd256897235841622"/>
                    <constructor-arg index="1" ref="organziation1"/>
                </bean>
                <ref bean="device1"/>
            </list>
        </property>
    </bean>

    <!-- 抽象类 -->
    <bean id="baseService" abstract="true">
        <property name="serviceID" value="123456"/>
        <property name="user" ref="user"/>
    </bean>

    <bean id="userRemoteService" class="com.wmm.spring.beans.UserRemoteService" parent="baseService">
        <property name="serviceID" value="123456"/>
        <property name="orgName" value="武汉"/>
    </bean>

    <bean id="organziation1" class="com.wmm.spring.beans.Organziation">
        <constructor-arg index="0" value="organziation1"/>
        <constructor-arg index="1" value="organziation1"/>
    </bean>

    <bean id="device" class="com.wmm.spring.beans.Device">
        <constructor-arg index="0" value="35458d2d256897235841622"/>
        <constructor-arg index="1" ref="organziation1"/>
    </bean>

    <bean id="device1" class="com.wmm.spring.beans.Device">
        <constructor-arg index="0" value="sdfsdfsdfsdfsdfsdf"/>
        <constructor-arg index="1" ref="organziation1"/>
    </bean>

    <!-- 由属性类型指定自动装配 -->
    <bean id="workers" class="com.wmm.spring.beans.Workers" autowire="byType">
        <property name="id" value="00544"/>
        <property name="name" value="王明明"/>
        <property name="salary" value="50000"/>
    </bean>

    <bean id="company" class="com.wmm.spring.beans.Company">
        <!--<property name="id" value="123456789634534"/>-->
        <property name="name" value="name"/>
    </bean>

    <bean id="address1" class="com.wmm.spring.beans.Address">
        <property name="location" value="光谷金融港B22"/>
        <property name="number" value="0711"/>
    </bean>

    <bean id="address" class="com.wmm.spring.beans.Address">
        <property name="location" value="光谷金融港"/>
        <property name="number" value="0710"/>
    </bean>

   <!-- <aop:config>
        <aop:aspect id="log" ref="logging">
            <aop:pointcut id="selectAll"
                          expression="execution(* com.wmm.spring.beans.*.*(..))"/>
            <aop:before pointcut-ref="selectAll" method="beforeAdvice"/>
            <aop:after pointcut-ref="selectAll" method="afterAdvice"/>
            <aop:after-returning pointcut-ref="selectAll"
                                 returning="retVal"
                                 method="afterReturningAdvice"/>
            <aop:after-throwing pointcut-ref="selectAll"
                                throwing="ex"
                                method="AfterThrowingAdvice"/>
        </aop:aspect>
    </aop:config>-->

    <!-- Definition for logging aspect -->
    <bean id="logging" class="com.wmm.spring.aop.Logging"/>
    <aop:aspectj-autoproxy/>
    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />
    <!-- 扫描Actions和Services -->
    <context:component-scan base-package="com.wmm.spring.services" />
    <bean class="com.wmm.spring.services.init.CustomerBeanPostProcessor"/>

    <!-- 观察者模式 -->
    <context:component-scan base-package="com.wmm.designmode.observer"/>
    <!--
    <bean id="publisher" class="com.wmm.designmode.observer.Publisher"/>
    <bean id="listener" class="com.wmm.designmode.observer.Listener"/>
    -->
    <bean id="event" class="com.wmm.designmode.observer.Event">
        <constructor-arg index="0" value="hello world"/>
        <constructor-arg index="1" value="hello world"/>
    </bean>

</beans>